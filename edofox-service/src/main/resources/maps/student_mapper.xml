<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rns.web.edo.service.dao.EdoTestsDao">
	<!-- result maps -->
	<resultMap id="packages" type="com.rns.web.edo.service.domain.EDOPackage">
		<result column="packageId" property="id" />
		<result column="package_name" property="name" />
		<result column="price" property="price" />
		<result column="institute_id" property="institute.id" />
		<result column="institute_name" property="institute.name" />
		<result column="offline_price" property="offlinePrice" />

	</resultMap>

	<resultMap id="classrooms" type="com.rns.web.edo.service.domain.EDOPackage">
		<result column="id" property="id" />
		<result column="session_name" property="name" />
		<result column="created_date" property="createdDate"/>
		<result column="recording_url" property="videoUrl"/>
	</resultMap>
	
	
	<resultMap id="videoLecture" type="com.rns.web.edo.service.domain.EdoVideoLectureMap">
		<result column="id" property="lecture.id" />
		<result column="video_name" property="lecture.videoName" />
		<result column="video_url" property="lecture.video_url"/>
		<result column="created_date" property="lecture.createdDate"/>
		<result column="subject_id" property="subject.id"/>
		<result column="classroom_id" property="classroom.id"/>
		<result column="institute_id" property="lecture.instituteId"/>
		<result column="subject" property="subject.subjectName"/>
		<result column="package_name" property="classroom.name"/>
	</resultMap>

	<select id="getInstituePackages" resultMap="packages"
		parameterType="Integer">
		select *, packages.id as packageId from institute join
		packages on institute.id =
		packages.institute_id
		where institute.status
		= 'Active' AND
		institute.id =${value};

	</select>

	<select id="getStudentPackages" resultMap="packages"
		parameterType="Integer">
		select *, packages.id as packageId from packages join
		student_institute on student_institute.package_id =
		packages.id
		where
		student_institute.student_id = ${value};

	</select>

	<insert id="saveStudent" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into student
		(name, email, mobile_no, password, roll_no, gender, school_district,
		date_of_birth, caste_category, parent_mobile_no )
		values('${name}',
		'${email}', '${phone}', '${password}', '${rollNo}', '${gender}',
		'${schoolDistrict}', '${dob}', '${casteCategory}',
		'${parentMobileNo}');
	</insert>
	
	<insert id="saveLogin" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		insert into student_login
		(username, password, student_id, institute_id, created_date, student_access)
		values('${rollNo}','${password}', ${id}, ${instituteId}, CURRENT_TIMESTAMP, '${accessType}');
	</insert>

	<update id="updateStudent" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		update student SET
		<if test="name != null">
			name = '${name}' ,
		</if>
		<if test="email != null">
			email = '${email}',
		</if>
		<if test="rollNo != null">
			roll_no = '${rollNo}',
		</if>
		gender = '${gender}' ,
		school_district = '${schoolDistrict}', date_of_birth = '${dob}', caste_category =
		'${casteCategory}'
		where id = ${id}
	</update>

	<insert id="createStudentPackage" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		useGeneratedKeys="true" keyProperty="transactionId" keyColumn="id">
		insert into student_institute
		(student_id,institute_id,package_id,status,exam_mode,payment_mode)
		values
		<foreach item="package" index="index" collection="packages"
			open="(" separator="),(" close=")">
			${id},${package.institute.id},
			${package.id}, '${package.status}', '${examMode}', '${payment.mode}'
		</foreach>
		<!-- (${id},${currentPackage.institute.id}, ${currentPackage.id}, 'Created', 
			'${examMode}', '${payment.mode}') ON DUPLICATE KEY UPDATE exam_mode = '${examMode}', 
			payment_mode = '${payment.mode}' -->
	</insert>

	<delete id="deleteExistingPackages" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		delete from student_institute where
		<foreach item="package" index="index" collection="packages"
			open="(" separator=") OR (" close=")">
			student_id = ${id} AND package_id =
			${package.id}
		</foreach>
	</delete>

	<update id="updatePaymentId" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		UPDATE student_institute set payment_id = '${payment.paymentId}' WHERE
		student_id =
		${id} AND status != 'Completed' AND package_id IN
		<foreach item="package" index="index" collection="packages"
			open="(" separator="," close=")">
			${package.id}
		</foreach>

	</update>

	<update id="updatePayment" parameterType="com.rns.web.edo.service.domain.EdoPaymentStatus">
		UPDATE
		student_institute set status = '${responseText}' WHERE payment_id =
		'${paymentId}';
	</update>

	<select id="getStudentByPhoneNumber" parameterType="com.rns.web.edo.service.domain.EdoPaymentStatus"
		resultMap="studentInfo">
		select * from student where mobile_no =
		'${phone}'
	</select>
	
	<select id="getStudentByRollNo" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		resultMap="studentInfo">
		select * from student where roll_no = '${rollNo}'
	</select>

	<select id="getStudentById" parameterType="Integer" resultMap="studentInfo">
		select * from student where id = ${value}
	</select>

	<select id="getAllStudents" parameterType="Integer" resultMap="studentInfo">
		select * from student join student_institute on student.id =
		student_institute.student_id
		where institute_id = ${value}
	</select>

	<select id="getTestPackage" parameterType="Integer" resultMap="packages">
		select * from test join packages on test.package_id = packages.id
		where test.test_id = ${value}
	</select>

	<select id="getStudentByPayment" parameterType="String"
		resultMap="studentInfo">
		SELECT *,student_institute.status as
		paymentStatus FROM student_institute
		join student on student.id = student_institute.student_id
		join packages on
		student_institute.package_id = packages.id
		join institute on
		institute.id = packages.institute_id
		where student_institute.payment_id
		= '${value}';
	</select>
	

<!-- join packages on live_session.classroom_id = packages.id -->
	<select id="getLiveSessions" parameterType="com.rns.web.edo.service.domain.EDOPackage" resultMap="classrooms">
		select * from live_session where classroom_id = ${id} AND status = '${status}' order by created_date desc;
	</select>
	
	<select id="getLiveSession" parameterType="Integer" resultMap="classrooms">
		select * from live_session where id = ${value};
	</select>
	
	<select id="getVideoLectures" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="videoLecture">
	SELECT video_lectures.*, test_subjects.subject,packages.package_name FROM video_lectures
    LEFT JOIN test_subjects ON video_lectures.subject_id = test_subjects.subject_id
    LEFT JOIN packages on video_lectures.classroom_id = packages.id
    WHERE video_lectures.institute_id=${institute.id} AND (video_lectures.classroom_id IN (select package_id from student_institute where student_id = ${student.id}) OR video_lectures.classroom_id IS NULL)
    ORDER BY created_date DESC
	
	</select>
	
	<select id="getStudentLogin" parameterType="com.rns.web.edo.service.domain.EdoStudent" resultMap="loginInfo">
		select * from student_login 
		join institute on student_login.institute_id = institute.id 
		join student on student_login.student_id = student.id 
		where student_login.username = '${rollNo}'
	</select>
	
	<insert id="saveVideoActiviy" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" >
		insert into video_activity
		(activity_type, created_date, session_id, classroom_id, 
		<if test="student.id != null">
			student_id, 
		</if>
		student_name, student_ref
		<if test="feedback.videoId != null">
			,video_id 
		</if>
		)
		values('${requestType}', CURRENT_TIMESTAMP, ${feedback.id}, ${student.currentPackage.id}, 
		<if test="student.id != null">
			${student.id},
		 </if>
		'${student.name}', '${student.rollNo}'
		<if test="feedback.videoId != null">
		,${feedback.videoId} 
		</if>
		)
	</insert>

</mapper>