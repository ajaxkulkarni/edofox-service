<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rns.web.edo.service.dao.EdoTestsDao">
	<!-- result maps -->
	<resultMap id="examAnalysis" type="com.rns.web.edo.service.domain.EdoTest">

		<result column="testId" property="id" />
		<result column="test_name" property="name" />
		<result column="no_of_questions" property="noOfQuestions" />
		<result column="total_marks" property="totalMarks" />
		<result column="duration" property="duration" />
		<result column="studentsAppeared" property="analysis.studentsAppeared" />
		<result column="avgScore" property="analysis.averageScore" />
		<result column="avgCorrect" property="analysis.averageCorrect" />
		<result column="avgSolved" property="analysis.averageAttempted" />

	</resultMap>
	
	<resultMap id="questionAnalysis" type="com.rns.web.edo.service.domain.EdoQuestion">
		<result column="question_id" property="qn_id" />
		<result column="question" property="question" />
		<result column="option1" property="option1" />
		<result column="option2" property="option2" />
		<result column="option3" property="option3" />
		<result column="option4" property="option4" />
		<result column="correct_answer" property="correctAnswer"/>
		<result column="weightage" property="weightage"/>
		<result column="negative_marks" property="negativeMarks"/>
		<result column="question_img_url" property="questionImageUrl" />
		<result column="option1_img_url" property="option1ImageUrl" />
		<result column="option2_img_url" property="option2ImageUrl" />
		<result column="option3_img_url" property="option3ImageUrl" />
		<result column="option4_img_url" property="option4ImageUrl" />
		<result column="optionCount" property="analysis.optionCount" />
		<result column="option_selected" property="analysis.optionSelected" />
		<result column="subject" property="subject" />
		<result column="correctCount" property="analysis.correctCount"/>
		<result column="wrongCount" property="analysis.wrongCount"/>
		<result column="solvedCount" property="analysis.solvedCount"/>
		
	</resultMap>
	
	
	<select id="getExamAnalysis" resultMap="examAnalysis" parameterType="Integer">
	select * from test left join 
(select  count(student_id) as studentsAppeared, avg(score) as avgScore, avg(correct) as avgCorrect, avg(solved) as avgSolved, test_id as testId 
from test_status group by test_id) as result on test.test_id = result.testId where test.test_id = ${value};

	</select>
	
	<select id="getQuestionAnalysis" resultMap="questionAnalysis" parameterType="Integer">
		select * from test_questions_map
		join test_questions on test_questions.id = test_questions_map.question_id
		join test_subjects on test_questions.subject_id = test_subjects.subject_id
		left join (select count(*) as optionCount,test_id, question_id, option_selected from test_result where test_id = ${value} group by option_selected, test_id, question_id) as result
		on result.question_id = test_questions_map.question_id where test_questions_map.test_id = ${value};
	</select>
	
	<select id="getQuestionCorrectness" resultMap="questionAnalysis" parameterType="Integer">
		select count(*) as solvedCount,test_result.question_id,correctQuery.correctCount, wrongQuery.wrongCount from test_result 
        left join 
        (select count(*) as correctCount, question_id from test_result 
        where question_id = ${value} AND option_selected != '' AND marks &gt; 0
        group by question_id) as correctQuery on test_result.question_id = correctQuery.question_id
        left join
        (select count(*) as wrongCount, question_id from test_result 
        where question_id = ${value} AND option_selected != '' AND marks &lt;= 0
        group by question_id) as wrongQuery on test_result.question_id = wrongQuery.question_id
        where test_result.question_id = ${value} AND test_result.option_selected != ''
        group by test_result.question_id
	</select>
	
	
	<resultMap id="students" type="com.rns.web.edo.service.domain.EdoStudent">

		<result column="studentId" property="id" />
		<result column="name" property="name" />
		<result column="email" property="email" />
		<result column="roll_no" property="rollNo" />
		<result column="mobile_no" property="phone"/>
		<result column="category_name" property="casteCategory" />
		<result column="score" property="analysis.score" />
		<result column="correct" property="analysis.correctCount" />
		<result column="solved" property="analysis.solvedCount" />
		<result column="flagged" property="analysis.flaggedCount" />
		<result column="parent_mobile_no" property="parentMobileNo"/>
		<result column="school_district" property="schoolDistrict"/>
		<result column="category_id" property="categoryId"/>
		<result column="districtId" property="districtId"/>
		<result column="regionId" property="regionId"/>
		<result column="institute_id" property="instituteId"/>
		<result column="regionName" property="regionName"/>
		<result column="districtName" property="districtName"/>
		<result column="10th_percentage" property="previousMarks"/>
		
	</resultMap>
	
	
	
	<select id="getStudentResults" resultMap="students" parameterType="Integer">
	select *,students.id as studentId,CONCAT(students.last_name,' ',students.first_name,' ',students.middle_name) as name,login_details.username as roll_no, 
	IF(districts.id IS NULL,student_districts.id ,districts.id) as districtId,
	IF(regions.id IS NULL,student_regions.id ,regions.id) as regionId,
	IF(districts.district_name IS NULL,student_districts.district_name ,districts.district_name) as districtName,
	IF(regions.region_name IS NULL,student_regions.region_name ,regions.region_name) as regionName
	
	from test_status join students on test_status.student_id = students.id 
	join login_details on login_details.student_id = students.id 
	LEFT JOIN categories on students.category_id = categories.id
	LEFT JOIN institutes
	ON institutes.id = students.institute_id
	LEFT JOIN districts
	ON districts.id = institutes.district_id
	LEFT JOIN districts student_districts
	ON student_districts.id = students.district_id
	LEFT JOIN regions
	ON regions.id  = districts.region_id
	LEFT JOIN regions student_regions
	ON student_regions.id  = student_districts.region_id
	where test_status.test_id = ${value} 
	order by test_status.score desc
	</select>
	
	<resultMap id="subjectScore" type="com.rns.web.edo.service.domain.EdoTestStudentMap">

		<result column="student_id" property="student.id" />
		<result column="score" property="subjectScore.score" />
		<result column="subject" property="subjectScore.subject" />
		<result column="totalQuestions" property="subjectScore.totalQuestions" />
		<result column="negativeScore" property="subjectScore.deductions" />
		<result column="solved" property="subjectScore.solvedCount" />
		<result column="totalDeductions" property="subjectScore.deductionsCount" />
		<result column="incorrects" property="subjectScore.incorrectCount" />
		<result column="test_id" property="test.id"/>
		<result column="weightage" property="subjectScore.totalMarks"/>
		<result column="maxSubjectMarks" property="subjectScore.maxSubjectMarks" />
		
	</resultMap>
	
	<!-- <select id="getSubjectwiseScore" resultMap="subjectScore" parameterType="Integer">
		SELECT sum(marks) as score, test_subjects.subject, student_id FROM `test_result` 
		join test_questions on test_result.question_id = test_questions.id 
		join test_subjects on test_questions.subject_id = test_subjects.subject_id 
		where test_id = ${value} GROUP BY test_result.student_id,test_questions.subject_id
	</select> -->
	
	<select id="getSubjectwiseScore" resultMap="subjectScore" parameterType="Integer">
		SELECT sum(marks) as score, count(*) as solved, test_subjects.subject, test_result.student_id,totalQuestions.totalQuestions,totalWrong.totalDeductions,totalWrong.negativeScore,totalIncorrect.incorrects FROM `test_result` 
		join test_questions on test_result.question_id = test_questions.id 
		join test_subjects on test_questions.subject_id = test_subjects.subject_id 
        left join (select count(*) as totalQuestions,subject_id from test_questions_map join test_questions on test_questions_map.question_id = test_questions.id where test_id = ${value} AND question_disabled = 0 group by subject_id) as totalQuestions on totalQuestions.subject_id = test_subjects.subject_id 
        left join (select count(*) as totalDeductions, sum(marks) as negativeScore,subject_id,student_id from test_result join test_questions on test_result.question_id = test_questions.id where test_id = ${value} AND marks &lt; 0 group by student_id, subject_id) as totalWrong on totalWrong.student_id = test_result.student_id AND  totalWrong.subject_id = test_subjects.subject_id
		left join (select count(*) as incorrects, subject_id,student_id from test_result join test_questions on test_result.question_id = test_questions.id where test_id = ${value} AND marks &lt;= 0 AND length(option_selected) &gt; 0 group by student_id, subject_id) as totalIncorrect on totalIncorrect.student_id = test_result.student_id AND  totalIncorrect.subject_id = test_subjects.subject_id
        where test_id = ${value} AND length(option_selected) > 0 GROUP BY test_result.student_id,test_questions.subject_id
	
	</select>
	
	<select id="getSubjectwiseScoreStudent" resultMap="subjectScore" parameterType="map">
		SELECT sum(marks) as score, test_subjects.subject, student_id FROM `test_result` 
		join test_questions on test_result.question_id = test_questions.id 
		join test_subjects on test_questions.subject_id = test_subjects.subject_id 
		where test_id = ${test} AND student_id = ${student} GROUP BY test_result.student_id,test_questions.subject_id
	</select>
	
	<select id="getTestSubjects" resultMap="subjects" parameterType="Integer">
	SELECT subject,test_questions.subject_id FROM `test_questions_map` 
	join test_questions on test_questions_map.question_id = test_questions.id 
	join test_subjects on test_questions.subject_id = test_subjects.subject_id 
	where test_id = ${value} group by test_questions.subject_id order by subject asc
	</select>
	
	<!-- test.institute_id = ${instituteId} AND  -->
	<select id="getStudentPerformance" parameterType="com.rns.web.edo.service.domain.EdoStudent" resultMap="test">
	SELECT test.package_id, test.test_id,test_name,ranks.rank,ranks.score,ranks.solved,ranks.correct,ranks.flagged,ranks.created_date,test.total_marks,start_date,totalStudents.totalStudents
	FROM test
	LEFT JOIN (select a.student_id, a.score, a.test_id, a.solved, a.correct, a.flagged, count(b.score)+1 as rank,a.created_date FROM test_status a left join test_status b 
	on a.score &lt; b.score and a.test_id=b.test_id where a.test_id in
 	(select test_id from test_status where student_id =  ${id}) AND a.student_id =  ${id}
 	group by a.student_id, a.score, a.test_id) as ranks
 	ON test.test_id = ranks.test_id
    left join (select count(*) as totalStudents,test_id from test_status where test_id in (select test_id from test_status where student_id = ${id}) group by test_id) as totalStudents on totalStudents.test_id = test.test_id
    
 	WHERE package_id in (SELECT CASE WHEN sub_packages_mapping.child_packge_id IS NOT NULL THEN sub_packages_mapping.child_packge_id ELSE student_package_mapping.package_id END AS package_id FROM student_package_mapping LEFT JOIN sub_packages_mapping ON student_package_mapping.package_id = sub_packages_mapping.parent_package_id LEFT JOIN fees_master ON fees_master.id = student_package_mapping.fee_id WHERE student_package_mapping.student_id =  ${id} AND fees_master.fee_status = 'Completed')
 	AND test.status = 'A' AND test.start_date &lt; CURRENT_TIMESTAMP
	AND test.show_result = 'Y'
 	ORDER BY test.start_date desc
	</select>
	
	<select id="getStudentRank" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="test">
	select test.test_id,test_name,ranks.rank,ranks.score,ranks.solved,ranks.correct,ranks.flagged,ranks.created_date,test.total_marks from test join 
	( SELECT a.student_id, a.score, a.test_id, a.solved, a.correct, a.flagged, count(b.score)+1 as rank,a.created_date FROM test_status a 
	left join test_status b on a.score&lt;b.score and a.test_id=b.test_id where a.test_id in 
	(select test_id from test_status where student_id = ${student.id}) AND a.student_id = ${student.id} 
	group by a.student_id, a.score, a.test_id) as ranks on test.test_id = ranks.test_id where ranks.test_id = ${test.id}
	order by ranks.created_date desc
	</select>
	
	<select id="getTopperScore" parameterType="Integer" resultMap="test">
		select max(score) as topScore,count(*) as totalStudents from test_status where test_id = ${value}
	</select>

	<select id="getSubjectwisePerformanceStudent" resultMap="subjectScore" parameterType="Integer">
		SELECT sum(marks) as score, test_subjects.subject, student_id, test_result.test_id, sum(weightage) as weightage,
		subjectMax.maxSubjectMarks FROM `test_result` 
		join test_questions on test_result.question_id = test_questions.id 
		join test_subjects on test_questions.subject_id = test_subjects.subject_id 
		left join (select max(maxMarks) as maxSubjectMarks,subject_id,test_id from ( SELECT sum(marks) as maxMarks,subject_id, 
		student_id,test_id FROM `test_result` join test_questions on test_result.question_id = test_questions.id 
		where test_id in (select test_id from test_status where student_id = ${value}) 
		group by test_id,subject_id,student_id ORDER BY maxMarks DESC) as sumMarks group by test_id,subject_id HAVING max(maxMarks) > 0) 
		as subjectMax on subjectMax.test_id = test_result.test_id AND subjectMax.subject_id = test_questions.subject_id 
		where student_id = ${value} GROUP BY test_result.student_id,test_result.test_id, test_questions.subject_id
	</select>
</mapper>