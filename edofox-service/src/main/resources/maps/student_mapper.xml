<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rns.web.edo.service.dao.EdoTestsDao">
	<!-- result maps -->
	<resultMap id="packages" type="com.rns.web.edo.service.domain.EDOPackage">
		<result column="packageId" property="id" />
		<result column="package_name" property="name" />
		<result column="price" property="price" />
		<result column="institute_id" property="institute.id" />
		<result column="institute_name" property="institute.name" />
		<result column="offline_price" property="offlinePrice" />

	</resultMap>

	<resultMap id="classrooms" type="com.rns.web.edo.service.domain.EDOPackage">
		<result column="id" property="id" />
		<result column="session_name" property="name" />
		<result column="created_date" property="createdDate"/>
		<result column="recording_url" property="videoUrl"/>
		<result column="start_date" property="fromDate"/>
		<result column="end_date" property="toDate"/>
	</resultMap>
	
	
	<resultMap id="videoLecture" type="com.rns.web.edo.service.domain.EdoVideoLectureMap">
		<result column="id" property="lecture.id" />
		<result column="video_name" property="lecture.videoName" />
		<result column="video_url" property="lecture.video_url"/>
		<result column="created_date" property="lecture.createdDate"/>
		<result column="subject_id" property="subject.id"/>
		<result column="classroom_id" property="classroom.id"/>
		<result column="classroom_id" property="lecture.classroomId"/>
		<result column="institute_id" property="lecture.instituteId"/>
		<result column="subject" property="subject.subjectName"/>
		<result column="package_name" property="classroom.name"/>
		<result column="keywords" property="lecture.keywords"/>
		<result column="question_img" property="lecture.questionImg"/>
		<result column="type" property="lecture.type"/>
		<result column="status" property="lecture.status"/>
		<result column="progress" property="lecture.progress"/>
		<result column="chapter_name" property="chapter.chapterName"/>
	</resultMap>

	<select id="getInstituePackages" resultMap="packages"
		parameterType="Integer">
		select *, packages.id as packageId from institute join
		packages on institute.id =
		packages.institute_id
		where institute.status
		= 'Active' AND
		institute.id =${value} AND packages.is_disabled = 0;

	</select>

	<select id="getStudentPackages" resultMap="packages"
		parameterType="Integer">
		select *, packages.id as packageId from packages join
		student_institute on student_institute.package_id =
		packages.id
		where
		student_institute.student_id = ${value} AND packages.is_disabled = 0;

	</select>

	<insert id="saveStudent" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into student
		(name, email, mobile_no, password, roll_no, gender, school_district,
		date_of_birth, caste_category, parent_mobile_no, previous_marks, referrer)
		values('${name}',
		'${email}', '${phone}', '${password}', '${rollNo}', '${gender}',
		'${schoolDistrict}', '${dob}', '${casteCategory}',
		'${parentMobileNo}', '${previousMarks}', '${referrer}');
	</insert>
	
	<insert id="saveLogin" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		insert into student_login
		(username, password, student_id, institute_id, created_date, student_access, universal_token)
		values('${rollNo}','${password}', ${id}, ${instituteId}, CURRENT_TIMESTAMP, 		
		<if test="accessType != null">
			'${accessType}', 
		</if>
		<if test="accessType == null">
			NULL, 
		</if>
		'${token}');
	</insert>

	<update id="updateStudent" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		update student SET
		<if test="name != null">
			name = '${name}' ,
		</if>
		<if test="email != null">
			email = '${email}',
		</if>
		<if test="rollNo != null">
			roll_no = '${rollNo}',
		</if>
		gender = '${gender}' ,
		school_district = '${schoolDistrict}', date_of_birth = '${dob}', caste_category =
		'${casteCategory}'
		where id = ${id}
	</update>
	
	<update id="updateStudentToken" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		update student_login SET universal_token = '${token}' where student_id = ${id}
	</update>
	
	<update id="deleteLogin" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		delete from student_login where student_id = ${id}
	</update>

	<insert id="createStudentPackage" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		useGeneratedKeys="true" keyProperty="transactionId" keyColumn="id">
		insert into student_institute
		(student_id,institute_id,package_id,status,exam_mode,payment_mode)
		values
		<foreach item="package" index="index" collection="packages"
			open="(" separator="),(" close=")">
			${id},${package.institute.id},
			${package.id}, '${package.status}', '${examMode}', '${payment.mode}'
		</foreach>
		<!-- (${id},${currentPackage.institute.id}, ${currentPackage.id}, 'Created', 
			'${examMode}', '${payment.mode}') ON DUPLICATE KEY UPDATE exam_mode = '${examMode}', 
			payment_mode = '${payment.mode}' -->
	</insert>

	<delete id="deleteExistingPackages" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		delete from student_institute where
		<foreach item="package" index="index" collection="packages"
			open="(" separator=") OR (" close=")">
			student_id = ${id} AND package_id =
			${package.id}
		</foreach>
	</delete>
	
	<delete id="deleteStudentPackages" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		delete from student_institute where student_id = ${id} AND institute_id = ${packages[0].institute.id}
	</delete>

	<update id="updatePaymentId" parameterType="com.rns.web.edo.service.domain.EdoStudent">
		UPDATE student_institute set payment_id = '${payment.paymentId}' WHERE
		student_id =
		${id} AND status != 'Completed' AND package_id IN
		<foreach item="package" index="index" collection="packages"
			open="(" separator="," close=")">
			${package.id}
		</foreach>

	</update>

	<update id="updatePayment" parameterType="com.rns.web.edo.service.domain.EdoPaymentStatus">
		UPDATE
		student_institute set status = '${responseText}' WHERE payment_id =
		'${paymentId}';
	</update>

	<select id="getStudentByPhoneNumber" parameterType="com.rns.web.edo.service.domain.EdoPaymentStatus"
		resultMap="studentInfo">
		select * from student where mobile_no =
		'${phone}'
	</select>
	
	<select id="getStudentByRollNo" parameterType="com.rns.web.edo.service.domain.EdoStudent"
		resultMap="studentInfo">
		select * from student where roll_no = '${rollNo}'
	</select>

	<select id="getStudentById" parameterType="Integer" resultMap="studentInfo">
		select * from student where id = ${value}
	</select>

	<select id="getAllStudents" parameterType="Integer" resultMap="studentInfo">
		select name,email,mobile_no,username as roll_no,student_login.password,profile_pic,universal_token as token from student join student_login on student.id = student_login.student_id where institute_id = ${value}
	</select>

	<select id="getTestPackage" parameterType="Integer" resultMap="packages">
		select * from test join packages on test.package_id = packages.id
		where test.test_id = ${value}
	</select>

	<select id="getStudentByPayment" parameterType="String"
		resultMap="studentInfo">
		SELECT *,student_institute.status as
		paymentStatus,institute.id as institute_id FROM student_institute
		join student on student.id = student_institute.student_id
		join packages on
		student_institute.package_id = packages.id
		join institute on
		institute.id = packages.institute_id
		where student_institute.payment_id
		= '${value}';
	</select>
	

<!-- join packages on live_session.classroom_id = packages.id -->
	<select id="getLiveSessions" parameterType="com.rns.web.edo.service.domain.EDOPackage" resultMap="classrooms">
		select * from live_session where classroom_id = ${id} AND status != 'Failed' order by start_date desc;
	</select>
	
	<select id="getLiveSession" parameterType="Integer" resultMap="classrooms">
		select * from live_session where id = ${value};
	</select>
	
	<select id="getVideoSubjects" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="subjects">
	
	SELECT subject,video_lectures.subject_id as subject_id FROM `video_lectures` join test_subjects on video_lectures.subject_id = test_subjects.subject_id 
	where video_lectures.institute_id = ${institute.id} 
	<if test="student != null">
    AND 
    (video_lectures.classroom_id IN (select package_id from student_institute where student_id = ${student.id}) OR video_lectures.classroom_id IS NULL)
    </if>
	group by video_lectures.subject_id
	
	</select>
	
	<select id="getVideoLectures" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="videoLecture">
	SELECT video_lectures.*, test_subjects.subject,packages.package_name FROM video_lectures
    LEFT JOIN test_subjects ON video_lectures.subject_id = test_subjects.subject_id
    LEFT JOIN packages on video_lectures.classroom_id = packages.id
    WHERE video_lectures.institute_id=${institute.id} AND video_lectures.is_disabled = 0 AND video_lectures.type is NULL
    <if test="student != null">
    AND 
    (video_lectures.classroom_id IN (select package_id from student_institute where student_id = ${student.id}) OR video_lectures.classroom_id IS NULL)
    </if>
    <if test="requestType == null || requestType != 'Teacher'">
    AND ( video_lectures.status is null OR video_lectures.status = 'Completed')
    </if>
    <if test="lecture != null &amp;&amp; lecture.topicId != null">
    AND video_lectures.topic_id = ${lecture.topicId}
    </if>
    <if test="searchFilter != null">
    AND (video_name like '%${searchFilter}%' OR subject like '%${searchFilter}%' OR package_name like '%${searchFilter}%')
    </if>
    <if test="subjectId != null">
    AND video_lectures.subject_id = ${subjectId}
    </if>
    ORDER BY created_date DESC
    <if test = "startIndex != null">
    	LIMIT ${startIndex}, ${startIndex + 10}
    </if>
	
	</select>
	
	<select id="getVideoLecture" parameterType="Integer" resultMap="videoLecture">
	SELECT video_lectures.*, test_subjects.subject,packages.package_name,chapters.chapter_name FROM video_lectures
    LEFT JOIN test_subjects ON video_lectures.subject_id = test_subjects.subject_id
    LEFT JOIN packages on video_lectures.classroom_id = packages.id
    LEFT JOIN dlp_chp_cls_content_map on dlp_chp_cls_content_map.content_id = video_lectures.id
    LEFT JOIN chapters on dlp_chp_cls_content_map.chapter_id = chapters.id
    where video_lectures.id = ${value}
	</select>
	
	<select id="getTestVideoLectures" parameterType="Integer" resultMap="videoLecture">
	SELECT * FROM video_lectures WHERE test_id=${value} AND video_lectures.is_disabled = 0 AND type = 'SOLUTION' ORDER BY created_date DESC
	</select>
	
	<select id="getStudentLogin" parameterType="com.rns.web.edo.service.domain.EdoStudent" resultMap="loginInfo">
		select * from student_login 
		join institute on student_login.institute_id = institute.id 
		join student on student_login.student_id = student.id 
		where 
		<if test="rollNo != null &amp;&amp; rollNo != ''">
			student_login.username = '${rollNo}' 
		</if>
		<if test="token != null">
			<if test="rollNo != null &amp;&amp; rollNo != ''">
				OR 
			</if>
			student_login.universal_token = '${token}'		
		</if>
	</select>
	
	<select id="getStudentActivity" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="feedback">
		select * from activity_summary where 
		<if test="student.id != null">
			student_id = ${student.id}  
		</if>
		<if test="student.rollNo != null">
			student_ref = '${student.rollNo}'  
		</if>
		
		AND
		<if test="feedback.id != null">
			session_id = ${feedback.id}
		</if>
		<if test="feedback.videoId != null">
			video_id = ${feedback.videoId}
		</if>
		
	</select>
	
	<insert id="saveVideoActiviy" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" >
		insert into video_activity
		(activity_type, created_date, 
		<if test="feedback.id != null">
			session_id, 
		</if>
		<if test="student.currentPackage != null">
			classroom_id, 
		</if>
		<if test="student.id != null">
			student_id, 
		</if>
		student_name, student_ref
		<if test="feedback.videoId != null">
			,video_id 
		</if>
		<if test="feedback.percentViewed != null">
			,percent_watched 
		</if>
		<if test="feedback.durationViewed != null">
			,duration_watched 
		</if>
		<if test="feedback.foundationId != null">
			,course_id 
		</if>
		,watch_status)
		values('${requestType}', 
		<if test="feedback.createdDate == null">
			CURRENT_TIMESTAMP,
		</if>
		<if test="feedback.createdDate != null">
			'${feedback.createdDateString}',
		</if>
		<if test="feedback.id != null">
			${feedback.id}, 
		</if>
		<if test="student.currentPackage != null">
			${student.currentPackage.id}, 
		</if>
		<if test="student.id != null">
			${student.id},
		 </if>
		'${student.name}', '${student.rollNo}'
		<if test="feedback.videoId != null">
		,${feedback.videoId} 
		</if>
		<if test="feedback.percentViewed != null">
			,${feedback.percentViewed}  
		</if>
		<if test="feedback.durationViewed != null">
			,${feedback.durationViewed}  
		</if>
		<if test="feedback.foundationId != null">
			,${feedback.foundationId}   
		</if>
		<if test="requestType == 'LIVE_JOINED'">
			,0 
		</if>
		<if test="requestType == 'VIDEO_STARTED'">
			,1  
		</if>
		<if test="requestType == 'VIDEO_ENDED'">
			,2
		</if>
		)
	</insert>
	
	<insert id="saveActivitySummary" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" >
		insert into activity_summary
		(status, last_watched, 
		<if test="feedback.id != null">
			session_id, 
		</if>
		<if test="student.id != null">
			student_id, 
		</if>
		student_name, student_ref
		<if test="feedback.videoId != null">
			,video_id 
		</if>
		<if test="feedback.percentViewed != null">
			,watched_percent 
		</if>
		<if test="feedback.durationViewed != null">
			,watched_duration 
		</if>
		<if test="feedback.totalDuration != null">
			,watch_time 
		</if>
		,watched_times
		,watched_activity
		,watch_status)
		values('${requestType}', 
		<if test="feedback.createdDate == null">
			last_watched = CURRENT_TIMESTAMP,
		</if>
		<if test="feedback.createdDate != null">
			last_watched = '${feedback.createdDateString}',
		</if>
		<if test="feedback.id != null">
			${feedback.id}, 
		</if>
		<if test="student.id != null">
			${student.id},
		 </if>
		'${student.name}', '${student.rollNo}'
		<if test="feedback.videoId != null">
		,${feedback.videoId} 
		</if>
		<if test="feedback.percentViewed != null">
			,${feedback.percentViewed}  
		</if>
		<if test="feedback.durationViewed != null">
			,${feedback.durationViewed}  
		</if>
		<if test="feedback.totalDuration != null">
			,${feedback.totalDuration}   
		</if>
		,${feedback.frequency}
		,${feedback.activityCount}
		<if test="requestType == 'LIVE_JOINED'">
			,0 
		</if>
		<if test="requestType == 'VIDEO_STARTED'">
			,1  
		</if>
		<if test="requestType == 'VIDEO_ENDED'">
			,2
		</if>
		)
	</insert>
	
	<update id="updateActivitySummary" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest">
		update activity_summary set
		<if test="feedback.percentViewed != null">
			watched_percent=${feedback.percentViewed} , 
		</if>
		<if test="feedback.durationViewed != null">
			watched_duration=${feedback.durationViewed},
		</if>
		watched_times=${feedback.frequency},
		watched_activity=${feedback.activityCount},
		watch_time=${feedback.totalDuration},
		<if test="feedback.createdDate == null">
			last_watched = CURRENT_TIMESTAMP,
		</if>
		<if test="feedback.createdDate != null">
			last_watched = '${feedback.createdDateString}',
		</if>
		status= '${requestType}',
		watch_status =
		<if test="requestType == 'LIVE_JOINED'">
			0 
		</if>
		<if test="requestType == 'VIDEO_STARTED'">
			1  
		</if>
		<if test="requestType == 'VIDEO_ENDED'">
			2
		</if>
		where 
		<if test="student.id != null">
			student_id = ${student.id}  
		</if>
		<if test="student.rollNo != null">
			student_ref = '${student.rollNo}'  
		</if>
		
		AND
		<if test="feedback.id != null">
			session_id = ${feedback.id}
		</if>
		<if test="feedback.videoId != null">
			video_id = ${feedback.videoId}
		</if>
		
	</update>
	
	<update id="updateActivityWatchTime" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest">
		update activity_summary set
		watch_time=watch_time + ${feedback.totalDuration}
		where 
		<if test="student.id != null">
			student_id = ${student.id}  
		</if>
		<if test="student.rollNo != null">
			student_ref = '${student.rollNo}'  
		</if>
		
		AND
		<if test="feedback.id != null">
			session_id = ${feedback.id}
		</if>
		<if test="feedback.videoId != null">
			video_id = ${feedback.videoId}
		</if>
		
	</update>
	
	<select id="getDeeperRegistration" parameterType="String" resultMap="studentInfo">
		SELECT concat(first_name, ' ', last_name) as name,email,mobile_no,application_id as roll_no, exams as package_name, student_id as id FROM `deeper_reg` 
		left join student_login on student_login.username = deeper_reg.application_id
		where application_id = '${value}' LIMIT 1
	</select>
	
	<select id="getStudentExams" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="test">
	
			SELECT student_institute.package_id,packages.package_name,test.test_id,test.test_name,
			test.start_date,test.end_date, test.duration, test.paper_pdf_url,test.solutions_pdf_url,
			test.no_of_questions,test.total_marks,test_status.status as studentStatus
            FROM student_institute
            INNER JOIN packages
            ON packages.id = student_institute.package_id
            INNER JOIN test
            ON test.package_id = student_institute.package_id
            LEFT JOIN test_status
            on test.test_id = test_status.test_id AND test_status.student_id = ${student.id}
            WHERE student_institute.student_id=${student.id} AND student_institute.institute_id=${institute.id}
            AND test.status='Active' 
            <if test="requestType != null &amp;&amp; requestType == 'Active'">
            AND test.end_date > CURRENT_TIMESTAMP
            </if>
            <if test="requestType != null &amp;&amp; requestType == 'Upcoming'">
            AND test.start_date > CURRENT_TIMESTAMP
            </if>
            <if test="requestType != null &amp;&amp; requestType == 'Past'">
            AND test.end_date &lt;= CURRENT_TIMESTAMP
            </if>
            order by test.end_date desc;
	
	</select>
	
	<select id="getStudentSubjects" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="subjects">
	
		SELECT * FROM dlp_subjects_classroom_map 
			join test_subjects on dlp_subjects_classroom_map.subject_id = test_subjects.subject_id
			join packages on dlp_subjects_classroom_map.classroom_id = packages.id
			where classroom_id in (select package_id from student_institute where student_id = ${student.id} AND institute_id = ${institute.id});
			;
	</select>
	
	<select id="getStudentChapters" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="chapters">
	
		SELECT chapters.id as id,chapters.chapter_name,dlp_chapters_classroom_map.classroom_id,dlp_chapters_classroom_map.chapter_id FROM dlp_chapters_classroom_map 
			join chapters on dlp_chapters_classroom_map.chapter_id = chapters.id
			join packages on dlp_chapters_classroom_map.classroom_id = packages.id
			where classroom_id = ${student.currentPackage.id} AND chapters.subject = ${subjectId}
			AND dlp_chapters_classroom_map.status = 1
            order by chapter_no asc;
	</select>
	
	<select id="getChapterContent" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="videoLecture">
	
		SELECT video_lectures.video_name, video_lectures.id as id, video_lectures.video_url, video_lectures.type, dlp_chp_cls_content_map.content_order,
		video_lectures.created_date 
		FROM dlp_chp_cls_content_map
    INNER JOIN video_lectures
    ON dlp_chp_cls_content_map.content_id = video_lectures.id
    and is_disabled=0 AND 
    <if test="requestType != null">
    	video_lectures.type = '${requestType}'
    </if>
    <if test="requestType == null">
    	video_lectures.type = 'DLPVIDEO'
    </if>
    INNER JOIN chapters
    ON dlp_chp_cls_content_map.chapter_id = chapters.id
    WHERE dlp_chp_cls_content_map.chapter_id = ${subjectId} AND
    dlp_chp_cls_content_map.classroom_id = ${student.currentPackage.id}
    AND (video_lectures.status = 'Completed' OR video_lectures.status is null)
    ORDER BY dlp_chp_cls_content_map.content_order
	</select>
	
	<select id="getChapterExams" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest" resultMap="test">
	
	SELECT dlp_chp_cls_content_map.*, test.*,test_status.status as studentStatus FROM dlp_chp_cls_content_map
    INNER JOIN test
    ON dlp_chp_cls_content_map.test_id = test.test_id AND test.status='Active'
    INNER JOIN chapters
    ON dlp_chp_cls_content_map.chapter_id = chapters.id
    LEFT JOIN test_status
    on test.test_id = test_status.test_id AND test_status.student_id = ${student.id}
    WHERE dlp_chp_cls_content_map.chapter_id = ${subjectId} AND
    dlp_chp_cls_content_map.classroom_id = ${student.currentPackage.id}
    ORDER BY dlp_chp_cls_content_map.content_order
	</select>
	
	<select id="getDlpContentSubject" parameterType="Integer" resultMap="subjects">
		SELECT test_subjects.subject_id,test_subjects.subject,chapters.id as chapter_id FROM dlp_chp_cls_content_map 
		join chapters on chapters.id = dlp_chp_cls_content_map.chapter_id
		join test_subjects on chapters.subject = test_subjects.subject_id
		where content_id = ${value}
	</select>
	
	<insert id="saveStudentTestActivity" parameterType="com.rns.web.edo.service.domain.EdoServiceRequest">
		insert into test_activity (test_id,student_id,activity_type,created_date) values(${test.id}, ${student.id}, '${requestType}', CURRENT_TIMESTAMP)
	</insert>
	
	
	<select id="getStudentDevicesForPackage" parameterType="Integer" resultMap="studentInfo">
		select * from device_id join student on device_id.student_id = student.id 
		where student_id in (select distinct student_id from student_institute where package_id in 
			(${value})
		)
	</select>
	
	<select id="getStudentDevicesForVideo" parameterType="com.rns.web.edo.service.domain.jpa.EdoVideoLecture" resultMap="studentInfo">
		select * from device_id join student on device_id.student_id = student.id where student_id in (select distinct student_id from student_institute where package_id in 
			( SELECT classroom_id FROM dlp_chp_cls_content_map where content_id = ${id})
		)
	</select>
	
	<select id="getStudentDevicesForExam" parameterType="com.rns.web.edo.service.domain.EdoTest" resultMap="studentInfo">
		select * from device_id join student on device_id.student_id = student.id where student_id in 
		(select distinct student_id from student_institute where package_id in 
			( SELECT classroom_id FROM dlp_chp_cls_content_map where test_id = ${id} AND classroom_id != ${packageId})
		)
	</select>
	
	<select id="getStudentContactsForExam" parameterType="com.rns.web.edo.service.domain.EdoTest" resultMap="studentInfo">
		select * from student where id in 
		(select distinct student_id from student_institute where package_id in 
			( SELECT classroom_id FROM dlp_chp_cls_content_map where test_id = ${id} AND classroom_id != ${packageId})
		)
	</select>
	
	<select id="getStudentContactsForPackage" parameterType="Integer" resultMap="studentInfo">
		select * from student where id in (select distinct student_id from student_institute where package_id in 
			(${value})
		)
	</select>
	
	<select id="getStudentContactsForVideo" parameterType="com.rns.web.edo.service.domain.jpa.EdoVideoLecture" resultMap="studentInfo">
		select * from student where id in (select distinct student_id from student_institute where package_id in 
			( SELECT classroom_id FROM dlp_chp_cls_content_map where content_id = ${id})
		)
	</select>
	
	<select id="getStudentDevicesForDoubt" parameterType="com.rns.web.edo.service.domain.EdoFeedback" resultMap="studentInfo">
	select distinct exam_feedback.student_id as id, device_id.token from exam_feedback 
	join student on exam_feedback.student_id = student.id
	join device_id on device_id.student_id = student.id
	<if test="questionId != null">
		where exam_feedback.question_id = ${questionId}
	</if>
	<if test="videoId != null">
		where exam_feedback.video_id = ${videoId}
	</if>
	<if test="id != null">
		where exam_feedback.id = ${id}
	</if>
	
	</select>
	
	<select id="getStudentContactsForDoubt" parameterType="com.rns.web.edo.service.domain.EdoFeedback" resultMap="studentInfo">
	select distinct exam_feedback.student_id as id,student.* from exam_feedback 
	join student on exam_feedback.student_id = student.id
	<if test="questionId != null">
		where exam_feedback.question_id = ${questionId}
	</if>
	<if test="videoId != null">
		where exam_feedback.video_id = ${videoId}
	</if>
	<if test="id != null">
		where exam_feedback.id = ${id}
	</if>
	
	</select>
</mapper>